#!/usr/bin/env python
# coding: utf-8

# training of the SVM model with GVAE-reduced features#


import pickle

import torch
import numpy as np
from torch_geometric.data import Data, DataLoader
from torch_geometric.utils import train_test_split_edges
from sklearn.model_selection import KFold
from sklearn.metrics import f1_score
import pandas as pd
from sklearn.svm import SVC


[gae, Labels]=pickle.load(open("data_gae_20.p","rb"))
#[gae, Labels]=pickle.load(open("data_gae_30.p","rb"))
#[gae, Labels]=pickle.load(open("data_gae_40.p","rb"))
#[gae, Labels]=pickle.load(open("data_gae_50.p","rb"))


for i in range(0,len(gae)):    
  
    arr.append(np.mean(np.array(gae[i]),axis=0))
    print (len(arr))






k_folds = 10
C=[0.1,0.5,1,5,10,20]
kernel=["linear","poly","rbf"]

all_results=pd.DataFrame(columns=["c","kernel","acc","fm","acc_folds","fm_folds"])
cnt=0
kfold = KFold(n_splits=k_folds, shuffle=True,random_state=123)


for c in C:
    for k in kernel:
        acc_results=[]
        f_results=[]
        print (k)
        for fold, (train_ids, test_ids) in enumerate(kfold.split(train)):
            print(f'FOLD {fold}')
            print('--------------------------------')

            clf = SVC(C=c,kernel=k).fit(train[train_ids], y[train_ids])

            acc_results.append(clf.score(train[test_ids,:], y[test_ids]))
            f_results.append(f1_score(y[test_ids],clf.predict(train[test_ids])))
            
        all_results.loc[cnt]=[c,k,np.mean(acc_results),np.mean(f_results),acc_results,f_results]
        print (all_results)
        cnt=cnt+1





all_results.to_csv("20_svm.csv",index=False)






